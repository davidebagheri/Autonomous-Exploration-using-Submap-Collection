<launch>
  <!-- Gazebo arguments -->
  <arg name="mav_name" default="firefly"/>
  <arg name="gui" default="false"/>
  <arg name="verbose_gazebo" default="false"/>

  <!-- Voxblox arguments -->
  <arg name="voxel_size" default="0.20"/>
  <arg name="voxels_per_side" default="16"/>
  <arg name="ray_length" default="5.0"/>
  <arg name="method" default="merged"/>
  <arg name="verbose_voxblox" default="false"/>
    
  <!-- Unreal Routine arguments -->
  <arg name="uecv_mode" default="standard"/>
  <arg name="slowdown" default="0.2"/>
  <arg name="delay" default="3.0"/>  
  
  <!-- Unreal Sensor arguments (ground_truth, kinect, gaussian_depth_noise)-->
  <arg name="model_type" default="ground_truth"/>
  <arg name="flatten_distance" default="6.0"/>
  <arg name="maximum_distance" default="0.0"/>
  
  <!-- Odometry  arguments (random_walk, ground_truth)-->
  <arg name="use_rovio" default="false"/>
  <arg name="odom_noise_model" default="ground_truth"/>
  
  <!--  Planner arguments-->
  <arg name="planner_config" default="planners/global_local_planner_RRTStar.yaml"/>
  <arg name="min_gain_threshold" default="150.0"/>
  <arg name="n_samples_threshold" default="40"/>
  <arg name="n_sample_tries_threshold" default="3000"/>
  <arg name="global_replan_pos_threshold" default="1.5"/>
  <arg name="global_replan_max_times" default="3"/>
  <arg name="frame_id" default="world" />
  <arg name="robot_radius" default="1.2"/>
  <arg name="truncation_distance" default="0.6"/>

  <!--  Experiment arguments -->  
  <arg name="experiment_config" default="Maze.yaml"/>
  <arg name="record_data" default="true"/>
  <arg name="record_visualization" default="true"/>
  <arg name="data_directory" default="/home/davide/data/experiment_evaluation"/> 
  <arg name="data_frequency" default="20.0" />
  <arg name="time_limit" default="30" />
  <arg name="eval_global_plan_frequency" default="false" />


  <!-- *** Run the Simulation *** -->
  <!-- Load experiment config -->
  <rosparam command="load" file="$(find active_3d_planning_app_reconstruction)/cfg/experiments/$(arg experiment_config)"/> 

  <!--Voxgraph config -->
  <rosparam command="load" file="$(find active_3d_planning_app_submap_exploration)/cfg/voxgraph/voxgraph_params_drift.yaml"/> 

  <!-- Setup empty gazebo world for physics-->
  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find unreal_cv_ros)/content/gazebo_empty.world" />
    <arg name="debug" value="false" />
    <arg name="paused" value="true" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose_gazebo)"/>
  </include>

  <group ns="$(arg mav_name)">
    <!-- Setup a mav -->
    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />
      <arg name="model" value="$(find rotors_description)/urdf/mav_generic_odometry_sensor.gazebo" />
      <arg name="enable_ground_truth" value="true" />
      <arg name="enable_logging" value="false" />
      <arg name="z" value="0" />
    </include>
    
    <!-- MPC trajectory tracker (0.0021 sampling time needs to match odom publish rate!)-->
    <node name="mav_nonlinear_mpc" pkg="mav_nonlinear_mpc" type="nonlinear_mpc_node" respawn="true" clear_params="true">
      <remap from="odometry" to="simulated_odometry" />
      <rosparam file="$(find mav_nonlinear_mpc)/resources/nonlinear_mpc_$(arg mav_name).yaml" />
      <rosparam file="$(find mav_disturbance_observer)/resources/disturbance_observer_$(arg mav_name).yaml"/>
      <param name="use_rc_teleop" value="false"/>
      <param name="verbose" value="false" />
      <param name="reference_frame" value="world"/>
      <param name="sampling_time" value="0.01"/>
    </node>
    
    <!-- Rotor input controller -->
    <node name="PID_attitude_controller" pkg="mav_lowlevel_attitude_controller" type="mav_pid_attitude_controller_node" respawn="true" clear_params="true">
      <remap from="odometry" to="simulated_odometry" />
      <rosparam file="$(find mav_lowlevel_attitude_controller)/resources/PID_attitude_$(arg mav_name).yaml" />
    </node>
    
    <!-- Odometry: noise model / rovio -->
    <node pkg="rovio" type="rovio_node" name="rovio" output="screen" if="$(arg use_rovio)">
      <param name="filter_config" value="$(find active_3d_planning_app_submap_exploration)/cfg/rovio/rovio.info"/>
      <param name="camera0_config" value="$(find active_3d_planning_app_submap_exploration)/cfg/rovio/unreal_cam0.yaml"/>
      <remap from="cam0/image_raw" to="/unreal/unreal_sensor_model/ue_gray_image_out" />
      <remap from="imu0" to="ground_truth/imu" />
    </node>
    <node name="odometry_noise_model" pkg="active_3d_planning_app_reconstruction" type="gps_odometry_simulator.py" output="screen" unless="$(arg use_rovio)">
      <param name="position_uncertainty" value="0.05"/>
      <param name="roll_pitch_uncertainty" value="1.5" />
      <param name="yaw_uncertainty" value="5.0" />
      <param name="noise_model" value="$(arg odom_noise_model)" />
      <param name="publish_tf" value="true" />
      <remap from="odometry_in" to="ground_truth/odometry" />
    </node>
    
    <!-- Odometry drift simulator -->
    <node name="odometry_simulator" pkg="voxgraph" type="odometry_simulator" output="screen">
       <rosparam file="$(find active_3d_planning_app_submap_exploration)/cfg/voxgraph/odometry_simulator.yaml"/>
    </node>

    <!-- static camera transform -->
    <node pkg="tf" type="static_transform_publisher" name="tf_camera_to_link" args="0 0 0 -0.5 0.5 -0.5 0.5 /camera_link /camera 100"/>  
  </group>

  <group ns="unreal">
    <!-- Unreal vision client -->
    <node name="unreal_ros_client" pkg="unreal_cv_ros" type="unreal_ros_client.py" required="true" output="screen">
      <param name="mode" value="$(arg uecv_mode)"/>
      <param name="publish_tf" value="false"/>
      <param name="collision_on" value="true"/>
      <param name="slowdown" value="$(arg slowdown)"/>
      <remap from="odometry" to="/$(arg mav_name)/ground_truth/odometry" />
    </node>
    
    <!-- Unreal sensor model -->
    <node name="unreal_sensor_model" pkg="unreal_cv_ros" type="sensor_model.py" output="screen">
      <param name="camera_params_ns" value="/unreal/unreal_ros_client/camera_params"/>
      <param name="flatten_distance" value="$(arg flatten_distance)"/>
      <param name="model_type" value="$(arg model_type)" />
      <param name="maximum_distance" value="$(arg maximum_distance)" />
      <param name="publish_gray_images" value="$(arg use_rovio)" />
      <param name="k_mu_2" value="0.0024" />
      <param name="k_sigma_2" value="0.0024" />
      <remap from="ue_sensor_raw" to="unreal_ros_client/ue_sensor_raw" />
    </node>

    <!-- Simulation manager for launching the MAV and monitoring -->
    <node name="simulation_manager" pkg="unreal_cv_ros" type="simulation_manager.py" output="screen">
      <param name="ns_mav" value="/$(arg mav_name)" />
      <param name="ns_gazebo" value="/gazebo" />
      <param name="monitor" value="true" />
      <param name="horizon" value="20" />
      <remap from="ue_raw_in" to="unreal_ros_client/ue_sensor_raw" />
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" /> 
    </node>

    <!-- Record a rosbag of the visualization-->
        <node pkg="rosbag" type="record" name="rosbag_vis_recorder"
       args="record -o $(arg data_directory)/tmp_bags/tmp_bag /rosout /clock /tf /firefly/reference_trajectory /firefly/base_link /planner/planner_node/combined_mesh /planner/planner_node/submap_frontiers /planner/planner_node/quarantine_frontiers /planner/trajectory_visualization /planner/mav_local_planner/local_path /voxblox_node/mesh" if="$(eval arg('record_data') and arg('record_visualization'))"/>

    <!-- Experiment launcher -->
    <node name="eval_data_node" pkg="active_3d_planning_app_submap_exploration" type="eval_data_node.py" output="screen" required="true">
      <remap from="ue_out_in" to="unreal_sensor_model/ue_sensor_out" />
      <remap from="unreal_simulation_ready" to="simulation_manager/simulation_ready" />
      <remap from="collision" to="unreal_ros_client/collision" />
      <param name="ns_planner" value="/planner/planner_node" />
      <param name="delay" value="$(arg delay)" />
      <param name="startup_timeout" value="30.0" />
      <param name="evaluate" value="$(arg record_data)" />
      <param name="eval_directory" value="$(arg data_directory)" />
      <param name="eval_frequency" value="$(arg data_frequency)" />
      <param name="time_limit" value="$(arg time_limit)" />
      <param name="eval_ground_truth_map" value="false" />
    </node>
  </group>
  
  <group ns="planner">
    <!-- Planner -->
    <node name="planner_node" pkg="active_3d_planning_app_submap_exploration" type="submap_exploration_planner_node" output="screen">
		  <!-- Voxgraph Map -->
      <param name="use_tf_transforms" value="false" />	
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="$(arg voxels_per_side)" />
      <param name="update_mesh_every_n_sec" value="0.0" />   
      <param name="publish_traversable" value="false" />   
      <param name="min_gain_threshold" value="$(arg min_gain_threshold)" />
      <param name="n_samples_threshold" value="$(arg n_samples_threshold)" />
      <param name="n_sample_tries_threshold" value="$(arg n_sample_tries_threshold)" />
      <param name="tsdf_needed" value="false" />
      <param name="global_replan_pos_threshold" value="$(arg global_replan_pos_threshold)" />
      <param name="global_replan_max_times" value="$(arg global_replan_max_times)" />

    	<!-- General Settings -->
      <remap from="odometry" to="/$(arg mav_name)/simulated_odometry" />
      <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />
      <remap from="global_trajectory" to="mav_local_planner/full_trajectory" />
	  <remap from="planner_node/plan" to="cblox_skeleton_planner/plan" />
	  <remap from="planner_node/publish_path" to="cblox_skeleton_planner/publish_path" />
      <remap from="planner_node/path_length" to="cblox_skeleton_planner/path_length" />

      <!-- Build the Planner by Configuration -->    
      <rosparam command="load" file="$(find active_3d_planning_app_submap_exploration)/cfg/$(arg planner_config)"/>
    </node>  

    <!-- Global planner node -->
    <node name="cblox_skeleton_planner" pkg="cblox_planning_ros"
          type="cblox_skeleton_server" output="screen"
          args="-alsologtostderr" clear_params="true" required="false">
      <remap from="tsdf_submap_in" to="planner_node/submap_esdfs" />
      <remap from="submap_pose_in" to="planner_node/submap_poses" />
	  <param name="verbose" value="false" />
      <param name="active_submap_service_topic"
          value="/planner/planner_node/publish_active_submap1"/>    <!--the name must be wrong if Voxgraph map is in the same node of the planner, otherwise deadlock!-->

      <param name="visualize" value="true"/>
      <param name="robot_radius" value="$(arg robot_radius)"/>
      <param name="do_smoothing" value="false"/>
      <param name="path_shortening" value="false"/>
      <param name="simplify solution" value="false"/>
      <param name="min_value" value="true"/>

      <param name="num_seconds_to_plan" value="3"/>
      <param name="grow_time" value="3"/>
      <param name="edge_density" value="1.5"/>

      <param name="frame_id" value="mission"/> 
      <param name="world_frame" value="mission"/> 
      <param name="mission_frame" value="mission"/> 
      <param name="odom_frame" value="world"/> 

      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="16" />
      <param name="esdf_voxel_size" value="0.20" />
      <param name="esdf_voxels_per_side" value="16" />
      <param name="truncation_distance" value="$(arg truncation_distance)"/>
    </node>  
	
	<!-- Global trajectory smoother -->
    <node name="mav_local_planner" pkg="mav_local_planner" type="mav_local_planner_node" args="-alsologtostderr" output="screen" clear_params="true">
      <remap from="odometry" to="/$(arg mav_name)/simulated_odometry" />
	  <remap from="command/trajectory" to="/$(arg mav_name)/command/trajectory" />
	  <param name="smoother_name" value="polynomial" />
      <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
      <param name="tsdf_voxels_per_side" value="16" />
      <param name="esdf_max_distance_m" value="$(arg truncation_distance)" />
      <param name="update_mesh_every_n_sec" value="5.0" />
      <param name="publish_traversable" value="true" />
      <param name="slice_level" value="1.0" />
      <param name="publish_slices" value="true" />
      <param name="autostart" value="false" />

      <!--param name="local_frame_id" value="$(arg frame_id)" /-->
      <param name="local_frame_id" value="$(arg frame_id)" />
      <param name="world_frame" value="$(arg frame_id)" />
      <param name="replan_dt" value="10000" />
      <param name="command_publishing_dt" value="10000" />
      <param name="replan_lookahead_sec" value="1.0" />
      <param name="mpc_prediction_horizon" value="300" />

      <param name="robot_radius" value="$(arg robot_radius)" />
      <param name="planning_horizon_m" value="20.0" />
      <param name="verbose" value="true" />
      <param name="v_max" value="2" />
      <param name="a_max" value="1.5" />
      <param name="avoid_collisions" value="false" />

      <!-- What to do in case of failure. -->
      <param name="goal_selector_strategy" value="none" />
    </node>
  </group>

  <!-- RVIZ Visualization -->
  <node type="rviz" name="rviz_voxblox" pkg="rviz" args="-d $(find active_3d_planning_app_submap_exploration)/cfg/experiments/experiment_visualization.rviz"/>
</launch>
